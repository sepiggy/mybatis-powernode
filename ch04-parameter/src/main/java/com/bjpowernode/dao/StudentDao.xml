<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bjpowernode.dao.StudentDao">
    <!--
       1. parameterType
       使用 parameterType 属性可以为 mybatis 指定 dao 接口形参的类型
       这个属性的值可以使用 java 类型的全限定名称或者 mybatis 定义的别名

       2. parameterType 属性原理:
          mybatis 执行的 sql 语句: select id,name,email,age from student where id=?
           ? 是占位符, 使用 jdbc 中的 PreparedStatement 执行这样的 sql 语句:
           PreparedStatement pst = conn.preparedStatement("select id,name,email,age from student where id=?");
           在 jdbc 中给 ? 位置赋值, 需要根据 ? 类型来调用不同的方法, 而 ? 类型正是通过 parameterType 属性指定:
               若参数是 Integer 类型, 执行 pst.setInt(1,1005);
               若参数是 String 类型, 执行 pst.setString(1,"1005");

       3. parameterType 属性用法:
          第一个用法： java 类型的全限定类型名称, eg. parameterType="java.lang.Integer"
          第二个用法： mybatis 定义的 java 类型的别名, eg. parameterType="int"

       4. 注意: mybatis 可以通过反射机制获取 dao 接口方法形式参数的类型, 因此 parameterType 这个属性可以不指定
    -->
    <select id="selectById" parameterType="integer" resultType="student">
        select id, name, email, age
        from student
        where id = #{studentId}
    </select>

    <!--
       若 dao 接口是一个简单类型 (8种基本类型 + String) 的参数
       mapper文件，获取这个参数值，使用#{任意字符}
    -->
    <select id="selectByEmail" resultType="com.bjpowernode.domain.Student">
        select id, name, email, age
        from student
        where email = #{studentEmail}
    </select>

    <!--
       多个简单类型的参数.
       当使用了@Param命名后，例如@Param("myname").
       在mapper中，使用#{命名的参数}， 例如 #{myname}
    -->
    <select id="selectByNameOrAge" resultType="com.bjpowernode.domain.Student">
        select id, name, email, age
        from student
        where name = #{myname}
           or age = #{myage}
    </select>

    <!--
       一个java对象作为方法的参数，使用对象的属性作为参数值使用
       简单的语法格式：#{属性名}, mybatis调用此属性的getXXX()方法获取属性值
    -->
    <!-- <select id="selectByObject" resultType="com.bjpowernode.domain.Student">
         select id,name,email,age from student where name=#{name} or age=#{age}
     </select>-->

    <select id="selectByObject" resultType="com.bjpowernode.domain.Student">
        select id, name, email, age
        from student
        where name = #{name,javaType=java.lang.String,jdbcType=VARCHAR}
           or age = #{age,javaType=java.lang.Integer,jdbcType=INTEGER}
    </select>

    <select id="selectByQueryParam" resultType="com.bjpowernode.domain.Student">
        select id, name, email, age
        from student
        where name = #{p1}
           or age = #{p2}
    </select>

    <!--
       使用位置获取参数值， dao接口方法是多个简单类型的参数
       语法： #{arg0}, #{arg1}....
    -->
    <select id="selectByPosition" resultType="com.bjpowernode.domain.Student">
        select id, name, email, age
        from student
        where name = #{arg0}
           or age = #{arg1}
    </select>

    <!--
       使用Map传递参数，
       在mapper文件中，获取map的值，是通过key获取的，语法：#{key}
    -->
    <select id="selectStudentByMap" resultType="com.bjpowernode.domain.Student">
        select id, name, email, age
        from student
        where name = #{myname}
           or age = #{myage}
    </select>

    <!--更新-->
    <update id="updateStudent">
        update student
        set name=#{name},
            email=#{email}
        where id = #{id}
    </update>


    <!--${}-->
    <select id="queryStudent" resultType="com.bjpowernode.domain.Student">
        select *
        from student
        where name = ${studentName}
    </select>

    <!--id 列排序-->
    <select id="queryStudentOrderById" resultType="com.bjpowernode.domain.Student">
        select *
        from student
        order by id
    </select>

    <!--name 列排序-->
    <select id="queryStudentOrderByName" resultType="com.bjpowernode.domain.Student">
        select *
        from student
        order by name
    </select>


    <select id="queryStudentOrderByColName" resultType="com.bjpowernode.domain.Student">
        select *
        from ${tableName}
        where name = #{myname}
        order by ${colName} desc
    </select>

</mapper>